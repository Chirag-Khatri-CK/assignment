/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  A service handles job management, including job CRUD, enumeration and search.
 * @class
 * @memberof v4
 */
export declare class JobServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    jobServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of JobServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    createJob(request?: protos.google.cloud.talent.v4.ICreateJobRequest, options?: CallOptions): Promise<[protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.ICreateJobRequest | undefined, {} | undefined]>;
    createJob(request: protos.google.cloud.talent.v4.ICreateJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.ICreateJobRequest | null | undefined, {} | null | undefined>): void;
    createJob(request: protos.google.cloud.talent.v4.ICreateJobRequest, callback: Callback<protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.ICreateJobRequest | null | undefined, {} | null | undefined>): void;
    getJob(request?: protos.google.cloud.talent.v4.IGetJobRequest, options?: CallOptions): Promise<[protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.IGetJobRequest | undefined, {} | undefined]>;
    getJob(request: protos.google.cloud.talent.v4.IGetJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.IGetJobRequest | null | undefined, {} | null | undefined>): void;
    getJob(request: protos.google.cloud.talent.v4.IGetJobRequest, callback: Callback<protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.IGetJobRequest | null | undefined, {} | null | undefined>): void;
    updateJob(request?: protos.google.cloud.talent.v4.IUpdateJobRequest, options?: CallOptions): Promise<[protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.IUpdateJobRequest | undefined, {} | undefined]>;
    updateJob(request: protos.google.cloud.talent.v4.IUpdateJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.IUpdateJobRequest | null | undefined, {} | null | undefined>): void;
    updateJob(request: protos.google.cloud.talent.v4.IUpdateJobRequest, callback: Callback<protos.google.cloud.talent.v4.IJob, protos.google.cloud.talent.v4.IUpdateJobRequest | null | undefined, {} | null | undefined>): void;
    deleteJob(request?: protos.google.cloud.talent.v4.IDeleteJobRequest, options?: CallOptions): Promise<[protos.google.protobuf.IEmpty, protos.google.cloud.talent.v4.IDeleteJobRequest | undefined, {} | undefined]>;
    deleteJob(request: protos.google.cloud.talent.v4.IDeleteJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.talent.v4.IDeleteJobRequest | null | undefined, {} | null | undefined>): void;
    deleteJob(request: protos.google.cloud.talent.v4.IDeleteJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.talent.v4.IDeleteJobRequest | null | undefined, {} | null | undefined>): void;
    searchJobs(request?: protos.google.cloud.talent.v4.ISearchJobsRequest, options?: CallOptions): Promise<[protos.google.cloud.talent.v4.ISearchJobsResponse, protos.google.cloud.talent.v4.ISearchJobsRequest | undefined, {} | undefined]>;
    searchJobs(request: protos.google.cloud.talent.v4.ISearchJobsRequest, options: CallOptions, callback: Callback<protos.google.cloud.talent.v4.ISearchJobsResponse, protos.google.cloud.talent.v4.ISearchJobsRequest | null | undefined, {} | null | undefined>): void;
    searchJobs(request: protos.google.cloud.talent.v4.ISearchJobsRequest, callback: Callback<protos.google.cloud.talent.v4.ISearchJobsResponse, protos.google.cloud.talent.v4.ISearchJobsRequest | null | undefined, {} | null | undefined>): void;
    searchJobsForAlert(request?: protos.google.cloud.talent.v4.ISearchJobsRequest, options?: CallOptions): Promise<[protos.google.cloud.talent.v4.ISearchJobsResponse, protos.google.cloud.talent.v4.ISearchJobsRequest | undefined, {} | undefined]>;
    searchJobsForAlert(request: protos.google.cloud.talent.v4.ISearchJobsRequest, options: CallOptions, callback: Callback<protos.google.cloud.talent.v4.ISearchJobsResponse, protos.google.cloud.talent.v4.ISearchJobsRequest | null | undefined, {} | null | undefined>): void;
    searchJobsForAlert(request: protos.google.cloud.talent.v4.ISearchJobsRequest, callback: Callback<protos.google.cloud.talent.v4.ISearchJobsResponse, protos.google.cloud.talent.v4.ISearchJobsRequest | null | undefined, {} | null | undefined>): void;
    batchCreateJobs(request?: protos.google.cloud.talent.v4.IBatchCreateJobsRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.talent.v4.IBatchCreateJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    batchCreateJobs(request: protos.google.cloud.talent.v4.IBatchCreateJobsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.talent.v4.IBatchCreateJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchCreateJobs(request: protos.google.cloud.talent.v4.IBatchCreateJobsRequest, callback: Callback<LROperation<protos.google.cloud.talent.v4.IBatchCreateJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchCreateJobs()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkBatchCreateJobsProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkBatchCreateJobsProgress(name: string): Promise<LROperation<protos.google.cloud.talent.v4.BatchCreateJobsResponse, protos.google.cloud.talent.v4.BatchOperationMetadata>>;
    batchUpdateJobs(request?: protos.google.cloud.talent.v4.IBatchUpdateJobsRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.talent.v4.IBatchUpdateJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    batchUpdateJobs(request: protos.google.cloud.talent.v4.IBatchUpdateJobsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.talent.v4.IBatchUpdateJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchUpdateJobs(request: protos.google.cloud.talent.v4.IBatchUpdateJobsRequest, callback: Callback<LROperation<protos.google.cloud.talent.v4.IBatchUpdateJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchUpdateJobs()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkBatchUpdateJobsProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkBatchUpdateJobsProgress(name: string): Promise<LROperation<protos.google.cloud.talent.v4.BatchUpdateJobsResponse, protos.google.cloud.talent.v4.BatchOperationMetadata>>;
    batchDeleteJobs(request?: protos.google.cloud.talent.v4.IBatchDeleteJobsRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.talent.v4.IBatchDeleteJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    batchDeleteJobs(request: protos.google.cloud.talent.v4.IBatchDeleteJobsRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.talent.v4.IBatchDeleteJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchDeleteJobs(request: protos.google.cloud.talent.v4.IBatchDeleteJobsRequest, callback: Callback<LROperation<protos.google.cloud.talent.v4.IBatchDeleteJobsResponse, protos.google.cloud.talent.v4.IBatchOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchDeleteJobs()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkBatchDeleteJobsProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkBatchDeleteJobsProgress(name: string): Promise<LROperation<protos.google.cloud.talent.v4.BatchDeleteJobsResponse, protos.google.cloud.talent.v4.BatchOperationMetadata>>;
    listJobs(request?: protos.google.cloud.talent.v4.IListJobsRequest, options?: CallOptions): Promise<[protos.google.cloud.talent.v4.IJob[], protos.google.cloud.talent.v4.IListJobsRequest | null, protos.google.cloud.talent.v4.IListJobsResponse]>;
    listJobs(request: protos.google.cloud.talent.v4.IListJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.talent.v4.IListJobsRequest, protos.google.cloud.talent.v4.IListJobsResponse | null | undefined, protos.google.cloud.talent.v4.IJob>): void;
    listJobs(request: protos.google.cloud.talent.v4.IListJobsRequest, callback: PaginationCallback<protos.google.cloud.talent.v4.IListJobsRequest, protos.google.cloud.talent.v4.IListJobsResponse | null | undefined, protos.google.cloud.talent.v4.IJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the tenant under which the job is created.
     *
     *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     *   "projects/foo/tenants/bar".
     * @param {string} request.filter
     *   Required. The filter string specifies the jobs to be enumerated.
     *
     *   Supported operator: =, AND
     *
     *   The fields eligible for filtering are:
     *
     *   * `companyName`
     *   * `requisitionId`
     *   * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
     *   OPEN if no value is specified.
     *
     *   At least one of `companyName` and `requisitionId` must present or an
     *   INVALID_ARGUMENT error is thrown.
     *
     *   Sample Query:
     *
     *   * companyName = "projects/foo/tenants/bar/companies/baz"
     *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
     *   requisitionId = "req-1"
     *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
     *   status = "EXPIRED"
     *   * requisitionId = "req-1"
     *   * requisitionId = "req-1" AND status = "EXPIRED"
     * @param {string} request.pageToken
     *   The starting point of a query result.
     * @param {number} request.pageSize
     *   The maximum number of jobs to be returned per page of results.
     *
     *   If {@link google.cloud.talent.v4.ListJobsRequest.job_view|job_view} is set to {@link google.cloud.talent.v4.JobView.JOB_VIEW_ID_ONLY|JobView.JOB_VIEW_ID_ONLY}, the maximum allowed
     *   page size is 1000. Otherwise, the maximum allowed page size is 100.
     *
     *   Default is 100 if empty or a number < 1 is specified.
     * @param {google.cloud.talent.v4.JobView} request.jobView
     *   The desired job attributes returned for jobs in the
     *   search response. Defaults to {@link google.cloud.talent.v4.JobView.JOB_VIEW_FULL|JobView.JOB_VIEW_FULL} if no value is
     *   specified.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Job]{@link google.cloud.talent.v4.Job} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listJobsStream(request?: protos.google.cloud.talent.v4.IListJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the tenant under which the job is created.
     *
     *   The format is "projects/{project_id}/tenants/{tenant_id}". For example,
     *   "projects/foo/tenants/bar".
     * @param {string} request.filter
     *   Required. The filter string specifies the jobs to be enumerated.
     *
     *   Supported operator: =, AND
     *
     *   The fields eligible for filtering are:
     *
     *   * `companyName`
     *   * `requisitionId`
     *   * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
     *   OPEN if no value is specified.
     *
     *   At least one of `companyName` and `requisitionId` must present or an
     *   INVALID_ARGUMENT error is thrown.
     *
     *   Sample Query:
     *
     *   * companyName = "projects/foo/tenants/bar/companies/baz"
     *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
     *   requisitionId = "req-1"
     *   * companyName = "projects/foo/tenants/bar/companies/baz" AND
     *   status = "EXPIRED"
     *   * requisitionId = "req-1"
     *   * requisitionId = "req-1" AND status = "EXPIRED"
     * @param {string} request.pageToken
     *   The starting point of a query result.
     * @param {number} request.pageSize
     *   The maximum number of jobs to be returned per page of results.
     *
     *   If {@link google.cloud.talent.v4.ListJobsRequest.job_view|job_view} is set to {@link google.cloud.talent.v4.JobView.JOB_VIEW_ID_ONLY|JobView.JOB_VIEW_ID_ONLY}, the maximum allowed
     *   page size is 1000. Otherwise, the maximum allowed page size is 100.
     *
     *   Default is 100 if empty or a number < 1 is specified.
     * @param {google.cloud.talent.v4.JobView} request.jobView
     *   The desired job attributes returned for jobs in the
     *   search response. Defaults to {@link google.cloud.talent.v4.JobView.JOB_VIEW_FULL|JobView.JOB_VIEW_FULL} if no value is
     *   specified.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Job]{@link google.cloud.talent.v4.Job}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listJobsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listJobsAsync(request?: protos.google.cloud.talent.v4.IListJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.talent.v4.IJob>;
    /**
     * Return a fully-qualified company resource name string.
     *
     * @param {string} project
     * @param {string} tenant
     * @param {string} company
     * @returns {string} Resource name string.
     */
    companyPath(project: string, tenant: string, company: string): string;
    /**
     * Parse the project from Company resource.
     *
     * @param {string} companyName
     *   A fully-qualified path representing Company resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCompanyName(companyName: string): string | number;
    /**
     * Parse the tenant from Company resource.
     *
     * @param {string} companyName
     *   A fully-qualified path representing Company resource.
     * @returns {string} A string representing the tenant.
     */
    matchTenantFromCompanyName(companyName: string): string | number;
    /**
     * Parse the company from Company resource.
     *
     * @param {string} companyName
     *   A fully-qualified path representing Company resource.
     * @returns {string} A string representing the company.
     */
    matchCompanyFromCompanyName(companyName: string): string | number;
    /**
     * Return a fully-qualified job resource name string.
     *
     * @param {string} project
     * @param {string} tenant
     * @param {string} job
     * @returns {string} Resource name string.
     */
    jobPath(project: string, tenant: string, job: string): string;
    /**
     * Parse the project from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromJobName(jobName: string): string | number;
    /**
     * Parse the tenant from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the tenant.
     */
    matchTenantFromJobName(jobName: string): string | number;
    /**
     * Parse the job from Job resource.
     *
     * @param {string} jobName
     *   A fully-qualified path representing Job resource.
     * @returns {string} A string representing the job.
     */
    matchJobFromJobName(jobName: string): string | number;
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project: string): string;
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName: string): string | number;
    /**
     * Return a fully-qualified tenant resource name string.
     *
     * @param {string} project
     * @param {string} tenant
     * @returns {string} Resource name string.
     */
    tenantPath(project: string, tenant: string): string;
    /**
     * Parse the project from Tenant resource.
     *
     * @param {string} tenantName
     *   A fully-qualified path representing Tenant resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTenantName(tenantName: string): string | number;
    /**
     * Parse the tenant from Tenant resource.
     *
     * @param {string} tenantName
     *   A fully-qualified path representing Tenant resource.
     * @returns {string} A string representing the tenant.
     */
    matchTenantFromTenantName(tenantName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
